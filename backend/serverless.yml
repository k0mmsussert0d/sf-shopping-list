service: sf-shopping-list
frameworkVersion: '2'

provider:
  name: aws
  runtime: python3.8
  lambdaHashingVersion: 20201221
  stage: dev
  environment:
    DOMAIN_SUFFIX: k0mmsussert0d-shopping-list
    RESOURCES_NAME: ${self:service}-${opt:stage, self:provider.stage}
    DYNAMODB_MAIN_TABLE: ${self:provider.environment.RESOURCES_NAME}-main-table
    DYNAMODB_USER_TO_LISTS_TABLE: ${self:provider.environment.RESOURCES_NAME}-user-to-lists-table
    DYNAMODB_LISTS_SHARE_TABLE: ${self:provider.environment.RESOURCES_NAME}-lists-share-table
    APP_URL: http://sf-shopping-list-dev-assets.s3-website-us-east-1.amazonaws.com
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_MAIN_TABLE}"
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_USER_TO_LISTS_TABLE}"
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_LISTS_SHARE_TABLE}"
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_MAIN_TABLE}/index/*"
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_USER_TO_LISTS_TABLE}/index/*"
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_LISTS_SHARE_TABLE}/index/*"

  httpApi:
    authorizers:
      serviceAuthorizer:
        identitySource: $request.header.Authorization
        issuerUrl: 
          Fn::Join:
          - ''
          - - 'https://cognito-idp.'
            - '${opt:region, self:provider.region}'
            - '.amazonaws.com/'
            - Ref: serviceUserPool
        audience:
          - Ref: serviceUserPoolClient
    cors: true

functions:
  createList:
    handler: shoppinglist.lists.create
    events:
      - httpApi:
          method: POST
          path: /list
          authorizer: serviceAuthorizer
  getList:
    handler: shoppinglist.lists.get
    events:
      - httpApi:
          method: GET
          path: /list/{id}
          authorizer: serviceAuthorizer
  listLists:
    handler: shoppinglist.lists.get_all
    events:
      - httpApi:
          method: GET
          path: /list
          authorizer: serviceAuthorizer
  updateList:
    handler: shoppinglist.lists.update
    events:
      - httpApi:
          method: PUT
          path: /list/{id}
          authorizer: serviceAuthorizer
  deleteList:
    handler: shoppinglist.lists.delete
    events:
      - httpApi:
          method: DELETE
          path: /list/{id}
          authorizer: serviceAuthorizer

  shareList:
    handler: shoppinglist.share.share_list
    events:
      - httpApi:
          method: POST
          path: /list/{id}/share
          authorizer: serviceAuthorizer
  acceptInvitation:
    handler: shoppinglist.share.accept_invitation
    events:
      - httpApi:
          method: GET
          path: /s/{code}
          authorizer: serviceAuthorizer

  getProfileInfo:
    handler: shoppinglist.user.get
    events:
      - httpApi:
            method: GET
            path: /user
            authorizer: serviceAuthorizer
  updateUserAvatar:
    handler: shoppinglist.user.update_avatar
    events:
      - httpApi:
            method: POST
            path: /user/avatar
            authorizer: serviceAuthorizer

resources:
  Resources:
    HttpApi:
      Type: 'AWS::ApiGatewayV2::Api'
      DependsOn: serviceUserPool

    ListsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
          -
            AttributeName: user_id
            AttributeType: S
          -
            AttributeName: created_at
            AttributeType: N
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          -
            IndexName: gsiUserLists
            KeySchema:
              -
                AttributeName: user_id
                KeyType: HASH
              -
                AttributeName: created_at
                KeyType: RANGE
            Projection:
              ProjectionType: KEYS_ONLY
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_MAIN_TABLE}
    UserToListsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          -
            AttributeName: user_id
            AttributeType: S
        KeySchema:
          -
            AttributeName: user_id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_USER_TO_LISTS_TABLE}
    ListsSharingDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        TimeToLiveSpecification:
          Enabled: true
          AttributeName: valid_until
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_LISTS_SHARE_TABLE}

    serviceUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: service-user-pool-${opt:stage, self:provider.stage}-${self:provider.environment.DOMAIN_SUFFIX}
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
        Schema:
          - Name: email
            Required: true
            Mutable: true
          - Name: nickname
            Required: true
            Mutable: true
    serviceUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: service-user-pool-client-${opt:stage, self:provider.stage}-${self:provider.environment.DOMAIN_SUFFIX}
        AllowedOAuthFlows:
          - implicit
        AllowedOAuthFlowsUserPoolClient: true
        AllowedOAuthScopes:
          - phone
          - email
          - openid
          - profile
          - aws.cognito.signin.user.admin
        UserPoolId:
          Ref: serviceUserPool
        CallbackURLs: 
          - https://localhost:3000
        ExplicitAuthFlows:
          - ALLOW_USER_SRP_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        GenerateSecret: false
        SupportedIdentityProviders: 
          - COGNITO
    serviceUserPoolDomain:
      Type: AWS::Cognito::UserPoolDomain 
      Properties:
        UserPoolId: 
          Ref: serviceUserPool
        Domain: service-user-pool-domain-${opt:stage, self:provider.stage}-${self:provider.environment.DOMAIN_SUFFIX}
    serviceIdentityPool:
      Type: AWS::Cognito::IdentityPool
      Properties:
        IdentityPoolName: service-identity-pool-${opt:stage, self:provider.stage}-${self:provider.environment.DOMAIN_SUFFIX}
        AllowUnauthenticatedIdentities: false
        CognitoIdentityProviders:
          -
            ClientId:
              Ref: serviceUserPoolClient
            ProviderName:
              Fn::GetAtt:
                - serviceUserPool
                - ProviderName
    CognitoUnauthorizedRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Federated: "cognito-identity.amazonaws.com"
              Action:
                - sts:AssumeRoleWithWebIdentity
              Condition:
                StringEquals:
                  "cognito-identity.amazonaws.com:aud":
                    Ref: serviceIdentityPool
                "ForAnyValue:StringLike":
                  "cognito-identity.amazonaws.com:amr": unauthenticated
        Policies:
          - PolicyName: CognitoUnauthorizedPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - mobileanalytics:PutEvents
                    - cognito-sync:*
                  Resource: '*'
    CognitoAuthorizedRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Federated: "cognito-identity.amazonaws.com"
              Action:
                - sts:AssumeRoleWithWebIdentity
              Condition:
                StringEquals:
                  "cognito-identity.amazonaws.com:aud":
                    Ref: serviceIdentityPool
                "ForAnyValue:StringLike":
                  "cognito-identity.amazonaws.com:amr": authenticated
        Policies:
          - PolicyName: CognitoAuthorizedPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - mobileanalytics:PutEvents
                    - cognito-sync:*
                    - cognito-identity:*
                  Resource: '*'
                - Effect: Allow
                  Action:
                    - execute-api:Invoke
                  Resource:
                    - Fn::Join:
                      - ''
                      - - 'arn:aws:execute-api:'
                        - '${opt:region, self:provider.region}:'
                        - Ref: AWS::AccountId
                        - ':'
                        - Ref: HttpApi
                        - '/'
                        - '${opt:stage, self:provider.stage}/*/*'
    serviceIdentityPoolRoleMapping:
      Type: AWS::Cognito::IdentityPoolRoleAttachment
      Properties:
        IdentityPoolId:
          Ref: serviceIdentityPool
        Roles:
          authenticated:
            Fn::GetAtt:
              - CognitoAuthorizedRole
              - Arn
          unauthenticated:
            Fn::GetAtt:
              - CognitoUnauthorizedRole
              - Arn

package:
  exclude:
    - node_modules/**
    - venv/**
    - frontend/**
plugins:
   - serverless-python-requirements
   - serverless-finch
custom:
  pythonRequirements:
    dockerizePip: non-linux
  client:
    bucketName: sf-shopping-list-dev-assets
    distributionFolder: assets
